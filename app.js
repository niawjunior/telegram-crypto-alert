const TelegramBot = require('node-telegram-bot-api');
const config = require('./config')
const _ = require('lodash')
const token = config.token;
const cron = require('node-cron')
const axios = require('axios')
var WAValidator = require('wallet-address-validator');
const bot = new TelegramBot(token, {
    polling: true
})
const firebase = require('firebase')
const firebase_config = config.firebase_config;
firebase.initializeApp(firebase_config);

const main = async()=> {
    return await axios.get(`https://api.coinmarketcap.com/v2/ticker/?convert=THB&limit=100`)
}
const key = [["‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤ üîé"], ["Top 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å üöÄ"], ["‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ üí∞"], ["‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô üíå"], ["‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‚ùå"], ["‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô üõ† (/start)"]]
const keyArr = [];

bot.onText(/\/start/, (msg) => {
        let option = {
            "reply_markup": {
                "keyboard": key
            }
        }
        user_id = msg.from.id
        bot.sendMessage(msg.chat.id, "\n‚öîÔ∏è‚öîÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ ‚öîÔ∏è‚öîÔ∏è\n\n 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ï‡πà‡∏≤‡∏á‡πÜ (Top 100) ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å coinmarketcap \n 2. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (Bitcoin, Ethereum) \n 3. ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Top 10 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å \n 4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô [10, 20, 30, 60] ‡∏ô‡∏≤‡∏ó‡∏µ (Top 100) \n\n", option)
})

bot.on('message', (msg) => {
    const check_price = msg.text
    if (check_price.toString().indexOf('‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤ üîé') === 0) {
        bot.sendMessage(msg.chat.id, "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ? (‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô btc? ‡∏´‡∏£‡∏∑‡∏≠ Bitcoin?)\n")
    }
})


bot.on('message', (msg) => {
    const check_balance = msg.text
    if (check_balance.toString().indexOf('‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ üí∞') === 0) {
        bot.sendMessage(msg.chat.id, "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ^ ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡πá‡∏ó ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ^0xcf4ca355ec55724dec46404b360bc00e516f6e8f\n ")
    }
})

async function check_ethereum_balance (wallet) {
   return await axios.get(`https://api.etherscan.io/api?module=account&action=balance&address=${wallet}&tag=latest&apikey=RIV89WHJKBBAS75BWT9QGNUPN8DST95H5P`)
}

async function check_bitcoin_balance (wallet) {
    return await axios.get(`https://blockexplorer.com/api/addr/${wallet}/balance`)
 }

bot.on('message', (msg) => {
    [...key].forEach(i => {
    keyArr.push(...i);
    })

    const inputText = msg.text

    if (!keyArr.includes(inputText)) {
        if (inputText.charAt(0) === '^') {
            const wallet = inputText.slice(1);
            if (check_wallet(wallet) === 'error') {
                bot.sendMessage(msg.chat.id, '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡πá‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n');
            } else {
                if(check_wallet(wallet) === 'BTC') {
                    check_bitcoin_balance(wallet).then(data => {
                        var balance = data.data / 100000000
                        bot.sendMessage(msg.chat.id, `‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${balance.toFixed(3)} BTC\n`)
                    })
                } 
                if(check_wallet(wallet) === 'ETH') {
                    check_ethereum_balance(wallet).then(data => {
                        var balance = data.data.result / 10e17
                        bot.sendMessage(msg.chat.id, `‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${balance.toFixed(3)} ETH\n`)
                    })
                }
            }
        }

        if(inputText.charAt(inputText.length -1) === '?') {
            const input_name_upper = (inputText.slice(0, inputText.length -1).replace(/\s/g, '')).toUpperCase()
            let search_name_array = []
            let search_symbol_array = []
            let search_coin = []
            main().then(data => {
                for (let i in data.data.data) {
                    const name = (data.data.data[i].name).toUpperCase()
                    const symbol = (data.data.data[i].symbol).toUpperCase()
                    const rank = data.data.data[i].rank
                    let thb = data.data.data[i].quotes.THB.price
                    let usd = data.data.data[i].quotes.USD.price
                    let percent_change_24h = data.data.data[i].quotes.USD.percent_change_24h
                    search_name_array.push(name)
                    search_symbol_array.push(symbol)
                    search_coin.push({
                        name: name,
                        symbol: symbol,
                        rank: rank,
                        thb: thb,
                        usd: usd,
                        percent_change_24h: percent_change_24h
                    })
                }
            }).then(() => {
                if (search_name_array.includes(input_name_upper) === true || search_symbol_array.includes(input_name_upper) === true) {
                    search_coin.map((item) => {
                        if(item.name === input_name_upper || item.symbol === input_name_upper) {
                            let price_thb = item.thb
                            let price_usd = item.usd
                            let percent_change_24h = item.percent_change_24h
                            bot.sendMessage(msg.chat.id, `‚ù§Ô∏è Rank. ${item.rank} ${item.symbol} (${item.name}) ‚ù§Ô∏è \n\n THB = ${price_thb.toLocaleString()} \n USD = ${price_usd.toLocaleString()} \n Change(24) = ${percent_change_24h}%`)
                        }
                    })
    
                } else {
                    bot.sendMessage(msg.chat.id, `\n ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á \n`)
                }
            })
        }

        if (inputText.toString().charAt(0) === '/' && inputText.toString().includes('/start') === false) {
            let coin = (inputText.toString().replace(/[^\w\s]/gi, '')).toUpperCase()
            main().then((data) => {
                let coin_name = []
                let coin_symbol = []
                for (let i in data.data.data) {
                    const name = (data.data.data[i].name).toUpperCase()
                    const symbol = (data.data.data[i].symbol).toUpperCase()
                    coin_name.push(name)
                    coin_symbol.push(symbol)
                }
                if (coin_name.includes(coin) === true || coin_symbol.includes(coin) === true) {
                    firebase.database().ref('Users').child(msg.from.id).update({
                        updated_At: Date.now(),
                        telegram_id: msg.from.id,
                        status: true,
                        coin: coin
                    }).then(() => {
                        bot.sendMessage(msg.chat.id, `\n ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ ${coin} ‡πÅ‡∏•‡πâ‡∏ß üéâ\n`)
                    })
                } else {
                    bot.sendMessage(msg.chat.id, `\n ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á \n`)
                }
            })
        }
    } else {

        if (inputText.toString().indexOf('Top 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å üöÄ') === 0) {
            let data_rank = []
            main().then(data => {
                for (let i in data.data.data) {
                    data_rank.push({
                        rank: data.data.data[i].rank,
                        name: data.data.data[i].name,
                        thb: data.data.data[i].quotes.THB.price,
                        usd: data.data.data[i].quotes.USD.price,
                        percent_change_24h: data.data.data[i].quotes.USD.percent_change_24h
                    })
                }
            }).then(() => {
                data_rank = _.orderBy(data_rank, ['rank'], ['asc'])
                data_rank.splice(-90)
                let table = ''
                data_rank.map(item => {
                    let price_thb = item.thb
                    let price_usd = item.usd
    
                    gen_rank_icon=(rank)=> {
                        if (rank == 1) {
                            return 'ü•á'
                        } else if (rank == 2) {
                            return 'ü•à'
                        } else if (rank == 3) {
                            return 'ü•â'
                        } else {
                            return 'üéó'
                        }
                    }
                  
                    if (item.percent_change_24h.toString().charAt(0) == '-') {
                        var icon_percent = 'üëá'
                    } else {
                        var icon_percent = 'üëÜ'
                    }
                    return table += `${item.rank}. ${gen_rank_icon(item.rank)} ${item.name} THB: ${price_thb.toLocaleString()} ‡∏ö‡∏≤‡∏ó USD: ${price_usd.toLocaleString()} ‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå Change(24h): ${item.percent_change_24h}% ${icon_percent} \n\n`
                })
                bot.sendMessage(msg.chat.id, `\n ${table} \n`)
            })
        }

        if (inputText.toString().indexOf('‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô üíå') === 0) {
            bot.sendMessage(msg.chat.id, "\n ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ / ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô /btc ‡∏´‡∏£‡∏∑‡∏≠ /Bitcoin) \n ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ [10, 20, 30, 60] ‡∏ô‡∏≤‡∏ó‡∏µ ")
        }

        if (inputText.toString().indexOf('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‚ùå') === 0) {
            firebase.database().ref('Users').child(msg.from.id).update({
                updated_At: Date.now(),
                telegram_id: msg.from.id,
                status: false
            }).then(() => {
                bot.sendMessage(msg.chat.id, "\n ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß \n")
            })
        }
    }
})

// wallet validator
function check_wallet(address) {
    var btc = WAValidator.validate(address, 'BTC');
    var eth = WAValidator.validate(address, 'ETH');

    if(btc) {
        return "BTC"
    }
    if(eth) {
        return "ETH"
    }
    if (!btc && !eth) {
        return 'error'
    }
}

cron.schedule('0 */10 * * * * ', function () {
    firebase.database().ref('Users').on('child_added', snap => {
        if (snap.val().status === true) {
            const select_coin = snap.val().coin
            const id = snap.val().telegram_id
                main().then(data => {
                    for (let i in data.data.data) {
                        const name = (data.data.data[i].name).toUpperCase()
                        const symbol = (data.data.data[i].symbol).toUpperCase()
                        if (select_coin === name || select_coin === symbol) {
                            let price_thb = data.data.data[i].quotes.THB.price
                            let price_usd = data.data.data[i].quotes.USD.price
                            let percent_change_24h = data.data.data[i].quotes.USD.percent_change_24h
                            bot.sendMessage(id, `üîî ${symbol} (${name}) üîî \n\n THB = ${price_thb.toLocaleString()} ‡∏ö‡∏≤‡∏ó \n USD = ${price_usd.toLocaleString()} ‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå \n Change(24) = ${percent_change_24h}%`).then(() => {
                                console.log('success')
                            })
                            .catch(() => {
                                return false
                            })
                        }
                    }
                }).catch(() => {
                    console.log('not found')
                })
        }
    })
})